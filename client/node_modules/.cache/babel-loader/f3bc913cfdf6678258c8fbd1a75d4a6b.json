{"ast":null,"code":"import _defineProperty from \"/media/afwani/3D2F2E7121F9CF4F/crwn-clothing/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport firebase from \"firebase\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nvar firebaseConfig = {\n  apiKey: \"AIzaSyCISIjSij-H6sdQuu0eEdztu0Lz3PCs1gY\",\n  authDomain: \"crwn-db-809f9.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-809f9.firebaseio.com\",\n  projectId: \"crwn-db-809f9\",\n  storageBucket: \"\",\n  messagingSenderId: \"29490011126\",\n  appId: \"1:29490011126:web:2a3b17e93b7dbdab0f05d7\",\n  measurementId: \"G-FCL31KER3W\"\n};\nfirebase.initializeApp(firebaseConfig);\nfirebase.analytics();\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const convertCollectionsToMap = collections => {\n  const transformedData = collections.docs.map(doc => {\n    const _doc$data = doc.data(),\n          title = _doc$data.title,\n          items = _doc$data.items;\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedData.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(\"users/\".concat(userAuth.uid));\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const displayName = userAuth.displayName,\n          email = userAuth.email;\n    const createdAt = new Date();\n\n    try {\n      if (displayName === null) {\n        await userRef.set(_objectSpread({\n          email,\n          createdAt\n        }, additionalData));\n      } else {\n        await userRef.set(_objectSpread({\n          displayName,\n          email,\n          createdAt\n        }, additionalData));\n      }\n    } catch (e) {\n      console.log(\"erro => \" + e.message);\n    }\n  }\n\n  return userRef;\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unSubscribe = auth.onAuthStateChanged(userAuth => {\n      unSubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n}; // export const addCollectionAndItems = async (collectionKey,ObjectToAdd) => {\n// \tconst collectionRef = firestore.collection(collectionKey);\n// \tconst batch = firestore.batch();\n// \tObjectToAdd.forEach(obj => {\n// \t\tconst docRef = collectionRef.doc();\n// \t\tbatch.set(docRef,obj);\n// \t})\n// \tawait batch.commit();\n// }\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  'promp': 'select_account'\n});\nexport const signInWithGoogle = () => {\n  auth.signInWithPopup(googleProvider);\n};\nexport default firebase;","map":{"version":3,"sources":["/media/afwani/3D2F2E7121F9CF4F/crwn-clothing/client/src/firebase.util.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","analytics","auth","firestore","convertCollectionsToMap","collections","transformedData","docs","map","doc","data","title","items","routeName","encodeURI","toLowerCase","id","reduce","accumulator","collection","createUserProfileDocument","userAuth","additionalData","userRef","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","e","console","log","message","getCurrentUser","Promise","resolve","reject","unSubscribe","onAuthStateChanged","googleProvider","GoogleAuthProvider","setCustomParameters","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from \"firebase\";\nimport \"firebase/firestore\"\nimport \"firebase/auth\";\n\n\nvar firebaseConfig = {\n    apiKey: \"AIzaSyCISIjSij-H6sdQuu0eEdztu0Lz3PCs1gY\",\n    authDomain: \"crwn-db-809f9.firebaseapp.com\",\n    databaseURL: \"https://crwn-db-809f9.firebaseio.com\",\n    projectId: \"crwn-db-809f9\",\n    storageBucket: \"\",\n    messagingSenderId: \"29490011126\",\n    appId: \"1:29490011126:web:2a3b17e93b7dbdab0f05d7\",\n    measurementId: \"G-FCL31KER3W\"\n};\n\nfirebase.initializeApp(firebaseConfig);\nfirebase.analytics();\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\n\nexport const convertCollectionsToMap = (collections) => {\n\tconst transformedData = collections.docs.map(doc => {\n\t\tconst { title,items } = doc.data();\n\n\t\treturn {\n\t\t\trouteName:encodeURI(title.toLowerCase()),\n\t\t\tid:doc.id,\n\t\t\ttitle,\n\t\t\titems\n\t\t}\n\t});\n\n\treturn transformedData.reduce((accumulator,collection) => {\n\t\taccumulator[collection.title.toLowerCase()] = collection\n\t\treturn accumulator;\n\t},{})\n}\n\nexport const createUserProfileDocument =  async (userAuth,additionalData) => {\n  if(!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot =  await userRef.get();\n  if(!snapShot.exists){\n    const {displayName,email} = userAuth;\n    const createdAt = new Date();\n    try{\n      if(displayName === null){\n        await userRef.set({\n          email,\n          createdAt,\n          ...additionalData\n        });\n      }else{\n        await userRef.set({\n          displayName,\n          email,\n          createdAt,\n          ...additionalData\n        });\n      }\n    }catch(e){\n      console.log(\"erro => \"+e.message);\n    }\n  }\n  return userRef;\n}\n\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unSubscribe = auth.onAuthStateChanged(userAuth => {\n      unSubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\n\n// export const addCollectionAndItems = async (collectionKey,ObjectToAdd) => {\n// \tconst collectionRef = firestore.collection(collectionKey);\n// \tconst batch = firestore.batch();\n// \tObjectToAdd.forEach(obj => {\n// \t\tconst docRef = collectionRef.doc();\n// \t\tbatch.set(docRef,obj);\n// \t})\n\n// \tawait batch.commit();\n// }\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({'promp':'select_account'});\nexport const signInWithGoogle = () => {auth.signInWithPopup(googleProvider)};\n\nexport default firebase;"]},"metadata":{},"sourceType":"module"}